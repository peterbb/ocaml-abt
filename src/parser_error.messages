slurp: LBRACE SEMICOLON 
##
## Ends in an error in state: 14.
##
## expression -> LBRACE . infix RBRACE [ SYM SEMICOLON RPAR RBRACE LBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LBRACE 
##

parse error 14.

slurp: LBRACE SYM SEMICOLON 
##
## Ends in an error in state: 17.
##
## infix -> expression . SYM arg [ RBRACE ]
##
## The known suffix of the stack is as follows:
## expression 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production args1 -> 
## In state 13, spurious reduction of production args2 -> args1 
## In state 12, spurious reduction of production expression -> SYM args2 
##

parse error 17.

slurp: LBRACE SYM SYM SEMICOLON 
##
## Ends in an error in state: 18.
##
## infix -> expression SYM . arg [ RBRACE ]
##
## The known suffix of the stack is as follows:
## expression SYM 
##

parse error 18.

slurp: LBRACE SYM SYM SYM SEMICOLON 
##
## Ends in an error in state: 15.
##
## expression -> LBRACE infix . RBRACE [ SYM SEMICOLON RPAR RBRACE LBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LBRACE infix 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production args1 -> 
## In state 13, spurious reduction of production args2 -> args1 
## In state 12, spurious reduction of production expression -> SYM args2 
## In state 22, spurious reduction of production arg -> expression 
## In state 23, spurious reduction of production infix -> expression SYM arg 
##

parse error 15.

slurp: SEMICOLON 
##
## Ends in an error in state: 0.
##
## slurp' -> . slurp [ # ]
##
## The known suffix of the stack is as follows:
## 
##

parse error 0.

slurp: SYM LBRACK RBRACK RBRACK 
##
## Ends in an error in state: 10.
##
## args2 -> LBRACK list(SYM) RBRACK . args1 [ SYM SEMICOLON RPAR RBRACE LBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LBRACK list(SYM) RBRACK 
##

parse error 10.

slurp: SYM LBRACK SEMICOLON 
##
## Ends in an error in state: 6.
##
## args2 -> LBRACK . list(SYM) RBRACK args1 [ SYM SEMICOLON RPAR RBRACE LBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LBRACK 
##

Indexes to an operator is a space separated list of names.

slurp: SYM LBRACK SYM SEMICOLON 
##
## Ends in an error in state: 7.
##
## list(SYM) -> SYM . list(SYM) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## SYM 
##

Indexes to an operator is a space separated list of names.

slurp: SYM LPAR SEMICOLON 
##
## Ends in an error in state: 2.
##
## args1 -> LPAR . loption(separated_nonempty_list(SEMICOLON,arg)) RPAR [ SYM SEMICOLON RPAR RBRACE LBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LPAR 
##

parse error 2.

slurp: SYM LPAR SYM DOT SEMICOLON 
##
## Ends in an error in state: 20.
##
## arg -> nonempty_list(SYM) DOT . expression [ SEMICOLON RPAR RBRACE ]
##
## The known suffix of the stack is as follows:
## nonempty_list(SYM) DOT 
##

parse error 20.

slurp: SYM LPAR SYM RBRACE 
##
## Ends in an error in state: 27.
##
## separated_nonempty_list(SEMICOLON,arg) -> arg . [ RPAR ]
## separated_nonempty_list(SEMICOLON,arg) -> arg . SEMICOLON separated_nonempty_list(SEMICOLON,arg) [ RPAR ]
##
## The known suffix of the stack is as follows:
## arg 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 3, spurious reduction of production args1 -> 
## In state 13, spurious reduction of production args2 -> args1 
## In state 12, spurious reduction of production expression -> SYM args2 
## In state 22, spurious reduction of production arg -> expression 
##

parse error 27.

slurp: SYM LPAR SYM RBRACK 
##
## Ends in an error in state: 3.
##
## expression -> SYM . args2 [ SEMICOLON RPAR RBRACE ]
## nonempty_list(SYM) -> SYM . [ DOT ]
## nonempty_list(SYM) -> SYM . nonempty_list(SYM) [ DOT ]
##
## The known suffix of the stack is as follows:
## SYM 
##

parse error 3.

slurp: SYM LPAR SYM SEMICOLON SEMICOLON 
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(SEMICOLON,arg) -> arg SEMICOLON . separated_nonempty_list(SEMICOLON,arg) [ RPAR ]
##
## The known suffix of the stack is as follows:
## arg SEMICOLON 
##

parse error 28.

slurp: SYM LPAR SYM SYM SEMICOLON 
##
## Ends in an error in state: 4.
##
## nonempty_list(SYM) -> SYM . [ DOT ]
## nonempty_list(SYM) -> SYM . nonempty_list(SYM) [ DOT ]
##
## The known suffix of the stack is as follows:
## SYM 
##

parse error 4.

slurp: SYM RBRACK 
##
## Ends in an error in state: 1.
##
## expression -> SYM . args2 [ SYM SEMICOLON RPAR RBRACE LBRACE EOF ]
##
## The known suffix of the stack is as follows:
## SYM 
##

parse error 1.

slurp: SYM SEMICOLON 
##
## Ends in an error in state: 33.
##
## list(expression) -> expression . list(expression) [ EOF ]
##
## The known suffix of the stack is as follows:
## expression 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 1, spurious reduction of production args1 -> 
## In state 13, spurious reduction of production args2 -> args1 
## In state 12, spurious reduction of production expression -> SYM args2 
##

Parameters to operator given in wrong order.
For an operator o, the shape is p[...](...).

